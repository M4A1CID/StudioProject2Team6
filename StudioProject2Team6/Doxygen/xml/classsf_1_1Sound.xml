<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classsf_1_1Sound" kind="class" prot="public">
    <compoundname>sf::Sound</compoundname>
    <basecompoundref refid="classsf_1_1SoundSource" prot="public" virt="non-virtual">sf::SoundSource</basecompoundref>
    <includes refid="Sound_8hpp" local="no">Sound.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsf_1_1Sound_1a321073271d3b559d491cfc15b0a9dd6d" prot="private" static="no" mutable="no">
        <type>const <ref refid="classsf_1_1SoundBuffer" kindref="compound">SoundBuffer</ref> *</type>
        <definition>const SoundBuffer* sf::Sound::m_buffer</definition>
        <argsstring></argsstring>
        <name>m_buffer</name>
        <briefdescription>
<para><ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> buffer bound to the source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="220" column="1" bodyfile="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsf_1_1Sound_1a36ab74beaaa953d9879c933ddd246282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sf::Sound::Sound</definition>
        <argsstring>()</argsstring>
        <name>Sound</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a3b1cfc19a856d4ff8c079ee41bb78e69" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>sf::Sound::Sound</definition>
        <argsstring>(const SoundBuffer &amp;buffer)</argsstring>
        <name>Sound</name>
        <param>
          <type>const <ref refid="classsf_1_1SoundBuffer" kindref="compound">SoundBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Construct the sound with a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> buffer containing the audio data to play with the sound </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1ae05eeed6377932694d86b3011be366c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sf::Sound::Sound</definition>
        <argsstring>(const Sound &amp;copy)</argsstring>
        <name>Sound</name>
        <param>
          <type>const <ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1ad0792c35310eba2dffd8489c80fad076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sf::Sound::~Sound</definition>
        <argsstring>()</argsstring>
        <name>~Sound</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a2953ffe632536e72e696fd880ced2532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::play</definition>
        <argsstring>()</argsstring>
        <name>play</name>
        <briefdescription>
<para>Start or resume playing the sound. </para>        </briefdescription>
        <detaileddescription>
<para>This function starts the stream if it was stopped, resumes it if it was paused, and restarts it from beginning if it was it already playing. This function uses its own thread so that it doesn&apos;t block the rest of the program while the sound is played.</para><para><simplesect kind="see"><para><ref refid="classsf_1_1Sound_1a5eeb25815bfa8cdc4a6cc000b7b19ad5" kindref="member">pause</ref>, <ref refid="classsf_1_1Sound_1aa9c91c34f7c6d344d5ee9b997511f754" kindref="member">stop</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a5eeb25815bfa8cdc4a6cc000b7b19ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::pause</definition>
        <argsstring>()</argsstring>
        <name>pause</name>
        <briefdescription>
<para>Pause the sound. </para>        </briefdescription>
        <detaileddescription>
<para>This function pauses the sound if it was playing, otherwise (sound already paused or stopped) it has no effect.</para><para><simplesect kind="see"><para><ref refid="classsf_1_1Sound_1a2953ffe632536e72e696fd880ced2532" kindref="member">play</ref>, <ref refid="classsf_1_1Sound_1aa9c91c34f7c6d344d5ee9b997511f754" kindref="member">stop</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1aa9c91c34f7c6d344d5ee9b997511f754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>stop playing the sound </para>        </briefdescription>
        <detaileddescription>
<para>This function stops the sound if it was playing or paused, and does nothing if it was already stopped. It also resets the playing position (unlike <ref refid="classsf_1_1Sound_1a5eeb25815bfa8cdc4a6cc000b7b19ad5" kindref="member">pause()</ref>).</para><para><simplesect kind="see"><para><ref refid="classsf_1_1Sound_1a2953ffe632536e72e696fd880ced2532" kindref="member">play</ref>, <ref refid="classsf_1_1Sound_1a5eeb25815bfa8cdc4a6cc000b7b19ad5" kindref="member">pause</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a8b395e9713d0efa48a18628c8ec1972e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::setBuffer</definition>
        <argsstring>(const SoundBuffer &amp;buffer)</argsstring>
        <name>setBuffer</name>
        <param>
          <type>const <ref refid="classsf_1_1SoundBuffer" kindref="compound">SoundBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Set the source buffer containing the audio data to play. </para>        </briefdescription>
        <detaileddescription>
<para>It is important to note that the sound buffer is not copied, thus the <ref refid="classsf_1_1SoundBuffer" kindref="compound">sf::SoundBuffer</ref> instance must remain alive as long as it is attached to the sound.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> buffer to attach to the sound</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classsf_1_1Sound_1a5f2f1ec6603f73625f393f0e9ab64476" kindref="member">getBuffer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1af23ab4f78f975bbabac031102321612b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::setLoop</definition>
        <argsstring>(bool loop)</argsstring>
        <name>setLoop</name>
        <param>
          <type>bool</type>
          <declname>loop</declname>
        </param>
        <briefdescription>
<para>Set whether or not the sound should loop after reaching the end. </para>        </briefdescription>
        <detaileddescription>
<para>If set, the sound will restart from beginning after reaching the end and so on, until it is stopped or setLoop(false) is called. The default looping state for sound is false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loop</parametername>
</parameternamelist>
<parameterdescription>
<para>True to play in loop, false to play once</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classsf_1_1Sound_1a603fbd32b519ae1680c40d8ddfc7ea51" kindref="member">getLoop</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1ab905677846558042022dd6ab15cddff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::setPlayingOffset</definition>
        <argsstring>(Time timeOffset)</argsstring>
        <name>setPlayingOffset</name>
        <param>
          <type><ref refid="classsf_1_1Time" kindref="compound">Time</ref></type>
          <declname>timeOffset</declname>
        </param>
        <briefdescription>
<para>Change the current playing position of the sound. </para>        </briefdescription>
        <detaileddescription>
<para>The playing position can be changed when the sound is either paused or playing. Changing the playing position when the sound is stopped has no effect, since playing the sound will reset its position.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>New playing position, from the beginning of the sound</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classsf_1_1Sound_1aeca741a3442d9934369a986ad40f19c0" kindref="member">getPlayingOffset</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a5f2f1ec6603f73625f393f0e9ab64476" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classsf_1_1SoundBuffer" kindref="compound">SoundBuffer</ref> *</type>
        <definition>const SoundBuffer* sf::Sound::getBuffer</definition>
        <argsstring>() const </argsstring>
        <name>getBuffer</name>
        <briefdescription>
<para>Get the audio buffer attached to the sound. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> buffer attached to the sound (can be NULL) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a603fbd32b519ae1680c40d8ddfc7ea51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sf::Sound::getLoop</definition>
        <argsstring>() const </argsstring>
        <name>getLoop</name>
        <briefdescription>
<para>Tell whether or not the sound is in loop mode. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the sound is looping, false otherwise</para></simplesect>
<simplesect kind="see"><para><ref refid="classsf_1_1Sound_1af23ab4f78f975bbabac031102321612b" kindref="member">setLoop</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1aeca741a3442d9934369a986ad40f19c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsf_1_1Time" kindref="compound">Time</ref></type>
        <definition>Time sf::Sound::getPlayingOffset</definition>
        <argsstring>() const </argsstring>
        <name>getPlayingOffset</name>
        <briefdescription>
<para>Get the current playing position of the sound. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current playing position, from the beginning of the sound</para></simplesect>
<simplesect kind="see"><para><ref refid="classsf_1_1Sound_1ab905677846558042022dd6ab15cddff0" kindref="member">setPlayingOffset</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1ae8b4084ff8f460b7a2bf9d39e846dab9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsf_1_1SoundSource_1ac43af72c98c077500b239bc75b812f03" kindref="member">Status</ref></type>
        <definition>Status sf::Sound::getStatus</definition>
        <argsstring>() const </argsstring>
        <name>getStatus</name>
        <briefdescription>
<para>Get the current status of the sound (stopped, paused, playing) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current status of the sound </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1a08c64c9c1dabeebc59fbf2540d81d4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> &amp;</type>
        <definition>Sound&amp; sf::Sound::operator=</definition>
        <argsstring>(const Sound &amp;right)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classsf_1_1Sound" kindref="compound">Sound</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Overload of assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to assign</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsf_1_1Sound_1acb7289d45e06fb76b8292ac84beb82a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sf::Sound::resetBuffer</definition>
        <argsstring>()</argsstring>
        <name>resetBuffer</name>
        <briefdescription>
<para>Reset the internal buffer of the sound. </para>        </briefdescription>
        <detaileddescription>
<para>This function is for internal use only, you don&apos;t have to use it. It is called by the <ref refid="classsf_1_1SoundBuffer" kindref="compound">sf::SoundBuffer</ref> that this sound uses, when it is destroyed in order to prevent the sound from using a dead buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="213" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regular sound that can be played in the audio environment. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classsf_1_1Sound" kindref="compound">sf::Sound</ref> is the class to use to play sounds.</para><para>It provides: <itemizedlist>
<listitem><para>Control (play, pause, stop) </para></listitem>
<listitem><para>Ability to modify output parameters in real-time (pitch, volume, ...) </para></listitem>
<listitem><para>3D spatial features (position, attenuation, ...).</para></listitem>
</itemizedlist>
<ref refid="classsf_1_1Sound" kindref="compound">sf::Sound</ref> is perfect for playing short sounds that can fit in memory and require no latency, like foot steps or gun shots. For longer sounds, like background musics or long speeches, rather see <ref refid="classsf_1_1Music" kindref="compound">sf::Music</ref> (which is based on streaming).</para><para>In order to work, a sound must be given a buffer of audio data to play. Audio data (samples) is stored in <ref refid="classsf_1_1SoundBuffer" kindref="compound">sf::SoundBuffer</ref>, and attached to a sound with the <ref refid="classsf_1_1Sound_1a8b395e9713d0efa48a18628c8ec1972e" kindref="member">setBuffer()</ref> function. The buffer object attached to a sound must remain alive as long as the sound uses it. Note that multiple sounds can use the same sound buffer at the same time.</para><para>Usage example: <programlisting><codeline><highlight class="normal">sf::SoundBuffer<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal">buffer.loadFromFile(&quot;sound.wav&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sf::Sound<sp/>sound;</highlight></codeline>
<codeline><highlight class="normal">sound.setBuffer(buffer);</highlight></codeline>
<codeline><highlight class="normal">sound.play();</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="classsf_1_1SoundBuffer" kindref="compound">sf::SoundBuffer</ref>, <ref refid="classsf_1_1Music" kindref="compound">sf::Music</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1074">
        <label>sf::Sound</label>
        <link refid="classsf_1_1Sound"/>
        <childnode refid="1075" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1075">
        <label>sf::SoundSource</label>
        <link refid="classsf_1_1SoundSource"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1080">
        <label>set&lt; Sound * &gt;</label>
      </node>
      <node id="1076">
        <label>sf::Sound</label>
        <link refid="classsf_1_1Sound"/>
        <childnode refid="1077" relation="public-inheritance">
        </childnode>
        <childnode refid="1079" relation="usage">
          <edgelabel>m_buffer</edgelabel>
        </childnode>
      </node>
      <node id="1081">
        <label>sf::Time</label>
        <link refid="classsf_1_1Time"/>
        <childnode refid="1081" relation="usage">
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="1082" relation="usage">
          <edgelabel>m_microseconds</edgelabel>
        </childnode>
      </node>
      <node id="1082">
        <label>signed long long</label>
      </node>
      <node id="1083">
        <label>vector&lt; Int16 &gt;</label>
      </node>
      <node id="1079">
        <label>sf::SoundBuffer</label>
        <link refid="classsf_1_1SoundBuffer"/>
        <childnode refid="1080" relation="usage">
          <edgelabel>m_sounds</edgelabel>
        </childnode>
        <childnode refid="1081" relation="usage">
          <edgelabel>m_duration</edgelabel>
        </childnode>
        <childnode refid="1083" relation="usage">
          <edgelabel>m_samples</edgelabel>
        </childnode>
        <childnode refid="1078" relation="usage">
          <edgelabel>m_buffer</edgelabel>
        </childnode>
      </node>
      <node id="1078">
        <label>unsigned</label>
      </node>
      <node id="1077">
        <label>sf::SoundSource</label>
        <link refid="classsf_1_1SoundSource"/>
        <childnode refid="1078" relation="usage">
          <edgelabel>m_source</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" line="46" column="1" bodyfile="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/Audio/Sound.hpp" bodystart="45" bodyend="221"/>
    <listofallmembers>
      <member refid="classsf_1_1SoundSource_1ac5f5ffef8930bb573f43d47cbc779bf6" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getAttenuation</name></member>
      <member refid="classsf_1_1Sound_1a5f2f1ec6603f73625f393f0e9ab64476" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getBuffer</name></member>
      <member refid="classsf_1_1Sound_1a603fbd32b519ae1680c40d8ddfc7ea51" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getLoop</name></member>
      <member refid="classsf_1_1SoundSource_1a3379b9f7a0f0e31ab9a4e5fa1762986e" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getMinDistance</name></member>
      <member refid="classsf_1_1SoundSource_1aedad6aff442aeb6dcd267befd4fdbb59" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getPitch</name></member>
      <member refid="classsf_1_1Sound_1aeca741a3442d9934369a986ad40f19c0" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getPlayingOffset</name></member>
      <member refid="classsf_1_1SoundSource_1a4c3bc60286f488aaf2941ab76476eebc" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getPosition</name></member>
      <member refid="classsf_1_1Sound_1ae8b4084ff8f460b7a2bf9d39e846dab9" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getStatus</name></member>
      <member refid="classsf_1_1SoundSource_1aafb0558fce9cbebfc6828d932cbcce2f" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>getVolume</name></member>
      <member refid="classsf_1_1SoundSource_1a5cb9107e1c47f65ab82c4885436061ef" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>isRelativeToListener</name></member>
      <member refid="classsf_1_1Sound_1a321073271d3b559d491cfc15b0a9dd6d" prot="private" virt="non-virtual"><scope>sf::Sound</scope><name>m_buffer</name></member>
      <member refid="classsf_1_1SoundSource_1a0223cef4b1c587e6e1e17b4c92c4479c" prot="protected" virt="non-virtual"><scope>sf::Sound</scope><name>m_source</name></member>
      <member refid="classsf_1_1Sound_1a08c64c9c1dabeebc59fbf2540d81d4dd" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>operator=</name></member>
      <member refid="classsf_1_1Sound_1a5eeb25815bfa8cdc4a6cc000b7b19ad5" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>pause</name></member>
      <member refid="classsf_1_1SoundSource_1ac43af72c98c077500b239bc75b812f03ac3ca1fcc0394267c9bdbe3dc0a8a7e41" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Paused</name></member>
      <member refid="classsf_1_1Sound_1a2953ffe632536e72e696fd880ced2532" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>play</name></member>
      <member refid="classsf_1_1SoundSource_1ac43af72c98c077500b239bc75b812f03af07bdea9f70ef7606dfc9f955beeee18" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Playing</name></member>
      <member refid="classsf_1_1Sound_1acb7289d45e06fb76b8292ac84beb82a7" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>resetBuffer</name></member>
      <member refid="classsf_1_1SoundSource_1aa2adff44cd2f8b4e3c7315d7c2a45626" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setAttenuation</name></member>
      <member refid="classsf_1_1Sound_1a8b395e9713d0efa48a18628c8ec1972e" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setBuffer</name></member>
      <member refid="classsf_1_1Sound_1af23ab4f78f975bbabac031102321612b" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setLoop</name></member>
      <member refid="classsf_1_1SoundSource_1a75bbc2c34addc8b25a14edb908508afe" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setMinDistance</name></member>
      <member refid="classsf_1_1SoundSource_1a72a13695ed48b7f7b55e7cd4431f4bb6" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setPitch</name></member>
      <member refid="classsf_1_1Sound_1ab905677846558042022dd6ab15cddff0" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setPlayingOffset</name></member>
      <member refid="classsf_1_1SoundSource_1a0480257ea25d986eba6cc3c1a6f8d7c2" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setPosition</name></member>
      <member refid="classsf_1_1SoundSource_1a17ba9ed01925395652181a7b2a7d3aef" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setPosition</name></member>
      <member refid="classsf_1_1SoundSource_1ac478a8b813faf7dd575635b102081d0d" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setRelativeToListener</name></member>
      <member refid="classsf_1_1SoundSource_1a2f192f2b49fb8e2b82f3498d3663fcc2" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>setVolume</name></member>
      <member refid="classsf_1_1Sound_1a36ab74beaaa953d9879c933ddd246282" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Sound</name></member>
      <member refid="classsf_1_1Sound_1a3b1cfc19a856d4ff8c079ee41bb78e69" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Sound</name></member>
      <member refid="classsf_1_1Sound_1ae05eeed6377932694d86b3011be366c0" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Sound</name></member>
      <member refid="classsf_1_1SoundSource_1ae0c7728c1449fdebe65749ab6fcb3170" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>SoundSource</name></member>
      <member refid="classsf_1_1SoundSource_1aefa4bd4460f387d81a0637d293979436" prot="protected" virt="non-virtual"><scope>sf::Sound</scope><name>SoundSource</name></member>
      <member refid="classsf_1_1SoundSource_1ac43af72c98c077500b239bc75b812f03" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Status</name></member>
      <member refid="classsf_1_1Sound_1aa9c91c34f7c6d344d5ee9b997511f754" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>stop</name></member>
      <member refid="classsf_1_1SoundSource_1ac43af72c98c077500b239bc75b812f03adabb01e8aa85b2f54b344890addf764a" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>Stopped</name></member>
      <member refid="classsf_1_1Sound_1ad0792c35310eba2dffd8489c80fad076" prot="public" virt="non-virtual"><scope>sf::Sound</scope><name>~Sound</name></member>
      <member refid="classsf_1_1SoundSource_1a77c7c1524f8cb81df2de9375b0f87c5c" prot="public" virt="virtual"><scope>sf::Sound</scope><name>~SoundSource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
