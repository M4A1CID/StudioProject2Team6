<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="group__system" kind="group">
    <compoundname>system</compoundname>
    <title>System module</title>
    <innerclass refid="classsf_1_1Clock" prot="public">sf::Clock</innerclass>
    <innerclass refid="classsf_1_1InputStream" prot="public">sf::InputStream</innerclass>
    <innerclass refid="classsf_1_1Lock" prot="public">sf::Lock</innerclass>
    <innerclass refid="classsf_1_1Mutex" prot="public">sf::Mutex</innerclass>
    <innerclass refid="classsf_1_1NonCopyable" prot="public">sf::NonCopyable</innerclass>
    <innerclass refid="classsf_1_1String" prot="public">sf::String</innerclass>
    <innerclass refid="classsf_1_1Thread" prot="public">sf::Thread</innerclass>
    <innerclass refid="classsf_1_1ThreadLocal" prot="public">sf::ThreadLocal</innerclass>
    <innerclass refid="classsf_1_1ThreadLocalPtr" prot="public">sf::ThreadLocalPtr</innerclass>
    <innerclass refid="classsf_1_1Time" prot="public">sf::Time</innerclass>
    <innerclass refid="singletonsf_1_1Utf" prot="public">sf::Utf</innerclass>
    <innerclass refid="classsf_1_1Vector2" prot="public">sf::Vector2</innerclass>
    <innerclass refid="classsf_1_1Vector3" prot="public">sf::Vector3</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__system_1ga2f2620831533dee0ed432ed982342e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="System_2Export_8hpp_1a6476c9e422606477a4c23d92b1d79a1f" kindref="member">SFML_SYSTEM_API</ref></type>
        <definition>void SFML_SYSTEM_API sf::sleep</definition>
        <argsstring>(Time duration)</argsstring>
        <name>sleep</name>
        <param>
          <type>Time</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Make the current thread sleep for a given duration. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__system_1ga2f2620831533dee0ed432ed982342e09" kindref="member">sf::sleep</ref> is the best way to block a program or one of its threads, as it doesn&apos;t consume any CPU power.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classsf_1_1Time" kindref="compound">Time</ref> to sleep </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/System/Sleep.hpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__system_1ga7fe7f475639e26334606b5142c29551f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="System_2Export_8hpp_1a6476c9e422606477a4c23d92b1d79a1f" kindref="member">SFML_SYSTEM_API</ref> std::ostream &amp;</type>
        <definition>sf::err</definition>
        <argsstring>()</argsstring>
        <name>err</name>
        <briefdescription>
<para>Standard stream used by SFML to output warnings and errors. </para>        </briefdescription>
        <detaileddescription>
<para>By default, <ref refid="group__system_1ga7fe7f475639e26334606b5142c29551f" kindref="member">sf::err()</ref> outputs to the same location as std::cerr, (-&gt; the stderr descriptor) which is the console if there&apos;s one available.</para><para>It is a standard std::ostream instance, so it supports all the insertion operations defined by the STL (operator &lt;&lt;, manipulators, etc.).</para><para><ref refid="group__system_1ga7fe7f475639e26334606b5142c29551f" kindref="member">sf::err()</ref> can be redirected to write to another output, independently of std::cerr, by using the rdbuf() function provided by the std::ostream class.</para><para>Example: <programlisting><codeline><highlight class="normal">//<sp/>Redirect<sp/>to<sp/>a<sp/>file</highlight></codeline>
<codeline><highlight class="normal">std::ofstream<sp/>file(&quot;sfml-log.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">std::streambuf*<sp/>previous<sp/>=<sp/>sf::err().rdbuf(file.rdbuf());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Redirect<sp/>to<sp/>nothing</highlight></codeline>
<codeline><highlight class="normal">sf::err().rdbuf(NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Restore<sp/>the<sp/>original<sp/>output</highlight></codeline>
<codeline><highlight class="normal">sf::err().rdbuf(previous);</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>Reference to std::ostream representing the SFML error stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/john/Desktop/StudioProject2Team6/StudioProject2Team6/SFML/include/SFML/System/Err.hpp" line="41" column="1"/>
        <referencedby refid="classApplication_1a276388f7090c0a2b1c8b16cf033b969d" compoundref="Application_8cpp" startline="67" endline="115">Application::Init</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base module of SFML, defining various utilities. </para>    </briefdescription>
    <detaileddescription>
<para>It provides vector classes, Unicode strings and conversion functions, threads and mutexes, timing classes. </para>    </detaileddescription>
  </compounddef>
</doxygen>
